// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketEscalator.Repositories.Contexts;

namespace TicketEscalator.WebAPI.Migrations
{
    [DbContext(typeof(TicketEscalatorDbContext))]
    [Migration("20210926224453_NullableFieldsAdded")]
    partial class NullableFieldsAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("CustomerProduct", b =>
                {
                    b.Property<int>("CustomersId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CustomersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CustomerProduct");
                });

            modelBuilder.Entity("EmployeeRepair", b =>
                {
                    b.Property<int>("EmployeesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RepairsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmployeesId", "RepairsId");

                    b.HasIndex("RepairsId");

                    b.ToTable("EmployeeRepair");
                });

            modelBuilder.Entity("ProductSparePart", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SparePartsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductsId", "SparePartsId");

                    b.HasIndex("SparePartsId");

                    b.ToTable("ProductSparePart");
                });

            modelBuilder.Entity("ProductTicket", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductsId", "TicketsId");

                    b.HasIndex("TicketsId");

                    b.ToTable("ProductTicket");
                });

            modelBuilder.Entity("SparePartTicket", b =>
                {
                    b.Property<int>("SparePartsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SparePartsId", "TicketsId");

                    b.HasIndex("TicketsId");

                    b.ToTable("SparePartTicket");
                });

            modelBuilder.Entity("TicketEscalator.Models.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SSN")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TicketEscalator.Models.Entities.CustomerContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContacts");
                });

            modelBuilder.Entity("TicketEscalator.Models.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TicketEscalator.Models.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Usage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TicketEscalator.Models.Entities.Repair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("DaytimeHours")
                        .HasColumnType("REAL");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<double?>("OvertimeHours")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("RepairDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Trip")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Repairs");
                });

            modelBuilder.Entity("TicketEscalator.Models.Entities.SparePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PartsNumber")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("TicketEscalator.Models.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssigneeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatorID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CustomerContacted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraItems")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReadyDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeID");

                    b.HasIndex("CreatorID");

                    b.HasIndex("CustomerId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("CustomerProduct", b =>
                {
                    b.HasOne("TicketEscalator.Models.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketEscalator.Models.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeRepair", b =>
                {
                    b.HasOne("TicketEscalator.Models.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketEscalator.Models.Entities.Repair", null)
                        .WithMany()
                        .HasForeignKey("RepairsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductSparePart", b =>
                {
                    b.HasOne("TicketEscalator.Models.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketEscalator.Models.Entities.SparePart", null)
                        .WithMany()
                        .HasForeignKey("SparePartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductTicket", b =>
                {
                    b.HasOne("TicketEscalator.Models.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketEscalator.Models.Entities.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SparePartTicket", b =>
                {
                    b.HasOne("TicketEscalator.Models.Entities.SparePart", null)
                        .WithMany()
                        .HasForeignKey("SparePartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketEscalator.Models.Entities.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketEscalator.Models.Entities.CustomerContact", b =>
                {
                    b.HasOne("TicketEscalator.Models.Entities.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TicketEscalator.Models.Entities.Repair", b =>
                {
                    b.HasOne("TicketEscalator.Models.Entities.Ticket", "Ticket")
                        .WithMany("Repairs")
                        .HasForeignKey("TicketId");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TicketEscalator.Models.Entities.Ticket", b =>
                {
                    b.HasOne("TicketEscalator.Models.Entities.Employee", "Assignee")
                        .WithMany("Assignee")
                        .HasForeignKey("AssigneeID")
                        .HasConstraintName("Assignee_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketEscalator.Models.Entities.Employee", "Creator")
                        .WithMany("Creator")
                        .HasForeignKey("CreatorID")
                        .HasConstraintName("Creator_FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketEscalator.Models.Entities.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Assignee");

                    b.Navigation("Creator");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TicketEscalator.Models.Entities.Customer", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketEscalator.Models.Entities.Employee", b =>
                {
                    b.Navigation("Assignee");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("TicketEscalator.Models.Entities.Ticket", b =>
                {
                    b.Navigation("Repairs");
                });
#pragma warning restore 612, 618
        }
    }
}
